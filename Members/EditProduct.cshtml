@{
    Page.title = "Edit Product";

    <!--When the site is shown for the first time, it gets the ProductID form the query string, 
    the code then uses the ID to read the corresponding product out of the database -->
    var ProductName = "";
    var Category = "";
    double Price = 0.0;
    double PurchasePrice = 0.0;
    double Stock = 0.0;

    //These variables are used to store the old values, so they can be compared to the new values and added to the log accordingly.
    var db = Database.Open("Cafeen");
    var ProductID = Request.QueryString["ID"];
    var dbCommand = "SELECT * FROM Products WHERE ID = @0";
    var rows = db.QuerySingle(dbCommand, ProductID);
    string OldProductName = rows.ProductName;
    string OldCategory = rows.Category;
    string OldPrice = Convert.ToString(rows.Price);
    string OldPurchasePrice = Convert.ToString(rows.PurchasePrice);
    string OldStock = Convert.ToString(rows.Stock);

    <!--Handles the first time the user enters the page.-->
    if(!IsPost)
        {
        <!--Here it is made sure that the ID is not empty, and that it is indeed an integer-->
        
        if(!Request.QueryString["ID"].IsEmpty() && Request.QueryString["ID"].IsInt())
            {
            ProductID = Request.QueryString["ID"];

            <!--if the row is equal to null skip then we skip because we will get an error if we try and get informaiton out of an empty row.-->
            if(rows != null)
                {
                ProductName = rows.ProductName;
                Category = rows.Category;
                Price = rows.Price;
                PurchasePrice = rows.PurchasePrice;
                Stock = rows.Stock;
                } 
            
            else 
                {
                Validation.AddFormError("No Product was found for that ID.");
                }
            }
        else
            {
            <!--This line produces an error message, in case the user presses the update product button after having entered the page without a Product ID-->
            Validation.AddFormError("No Product was selected.");
            }
        }

    if(IsPost)
        { 
        <!--If the update product button is pressed, we require all 4 fields to be filled out, and then request what's inside the fields.-->
        Validation.RequireField("ProductName", "You haven't entered a Product Name");
        Validation.RequireField("Category", "You haven't entered a Category");
        Validation.RequireField("Price", "You haven't entered a Price");
        Validation.RequireField("PurchasePrice", "You haven't entered a Purchase Price");
        Validation.RequireField("Stock", "You haven't entered a Stock number");
        Validation.RequireField("ProductID", "No product ID was submitted!");

        ProductName = Request.Form["ProductName"];
        Category = Request.Form["Category"];
        Price = Convert.ToDouble(Request.Form["Price"]);
        PurchasePrice = Convert.ToDouble(Request.Form["PurchasePrice"]);
        Stock = Request.Form["Stock"].AsInt();
        ProductID = Request.Form["ProductID"];

        <!--Opens the database and updates the product information, by calling the EditProduct command with the values set above.-->
        if(Validation.IsValid())
            {
            Funcs.EditProduct(ProductName, Category, Price, PurchasePrice, Stock, ProductID);
            Funcs.SaveLogData(ProductID, OldProductName, OldCategory, OldPrice, OldPurchasePrice, OldStock);
            Response.Redirect("~/Members/Products.cshtml");
            }
        }
}



<!--Creates the new tables and positions the validation error message to the end of every line-->
<h1>Edit a Product</h1>
<form method="post">
    <fieldset>
        <legend>Add product to database</legend>
        <p>
            <label for="ProductName">Product Name:</label>
            <input type="text" name="ProductName" value="@ProductName" />
            @Html.ValidationMessage("ProductName")
        </p>

        <p>
            <label for="Category">Category:</label>
            <input type="text" name="Category" value="@Category" />
            @Html.ValidationMessage("Category")
        </p>

        <p>
            <label for="Price">Price:</label>
            <input type="number" name="Price" value="@Price" />
            @Html.ValidationMessage("Price")
        </p>

        <p>
            <label for="PurchasePrice">Purchase Price:</label>
            <input type="number" name="PurchasePrice" value="@PurchasePrice"/>
            @Html.ValidationMessage("PurchasePrice")
        </p>

        <p>
            <label for="Stock">Stock:</label>
            <input type="number" name="Stock" value="@Stock"/>
             @Html.ValidationMessage("Stock")
        </p>

        <!--Gives the product a hidden ID to be used to restore information about the ID from the database-->
        <input type="hidden" name="ProductID" value="@ProductID" />

        <p>
            <input type="submit" name="buttonSubmit" value="Submit Changes" />
        </p>
        
    </fieldset>
</form>
    
<p>
    <a href="~/Members/Products.cshtml">Return to product listings</a>
</p>
